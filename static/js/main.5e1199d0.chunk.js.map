{"version":3,"sources":["components/Person/Person.js","containers/Persons.js","store/actions.js","components/AddPerson/AddPerson.js","containers/AddPerson.js","components/UpdatePerson/UpdatePerson.js","containers/UpdatePerson.js","App.js","store/reducer.js","index.js"],"names":["Modal","_this$props","this","props","removePerson","name","showModal","toggle","id","modal","react_default","a","createElement","className","concat","Button","variant","onClick","Fragment","React","Component","Person","_this","Object","classCallCheck","_super2","call","handleToggleModal","setState","state","renderSortOrder","sortOrder","changeSortOrder","bind","assertThisInitialized","_this2","_this$props2","users","renderUsers","map","user","key","username","email","address","city","react_router_dom","to","renderAddPersonButton","Person_Modal","Table","responsive","striped","bordered","hover","Persons","loading","error","components_Person_Person","onRemovePerson","onChangeSortOrder","connect","data","dispatch","type","personId","order","emailValidator","AddPerson","_super","emailAddress","firstNameError","emailAddressError","isFormSubmitted","handleChange","handleBlur","handleSubmit","validateFirstName","validateEmailAddress","validateField","event","_event$target","target","value","defineProperty","preventDefault","isValid","forEach","field","trim","test","_this3","disabled","Form","onSubmit","Group","controlId","Label","Control","placeholder","onChange","onBlur","autoComplete","personAdded","AddPersonContainer","components_AddPerson_AddPerson","onAddedPerson","userData","UpdatePerson","person","onUpdatePerson","UpdatePersonContainer","find","match","params","components_UpdatePerson_UpdatePerson","updatePerson","About","App","fetchUsers","basename","react_router","path","exact","component","fetch","then","response","json","catch","initialState","reducer","arguments","length","undefined","action","objectSpread","newPerson","Math","floor","random","changedData","filter","newData","sort","b","localeCompare","store","createStore","rootElement","document","getElementById","ReactDOM","render","es","src_App"],"mappings":"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","file":"static/js/main.5e1199d0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Person.scss\";\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button'\nimport { Link } from \"react-router-dom\";\n\nclass Modal extends React.Component {\n    render() {\n        const {removePerson, name, showModal, toggle, id} = this.props;\n        let modal = showModal ? (\n            <div className={`${showModal ? \"modal-visible\" : \"modal-non-visible\"}`}>\n                <div className=\"modal-question-container\">\n                    <p>Are you sure to remove {name}?</p>\n                </div>\n                <div className=\"modal-buttons-container\">\n                    <Button variant=\"danger\" onClick={() => {removePerson(id); toggle();}}>Remove</Button>\n                    <Button variant=\"warning\" onClick={toggle}>Cancel</Button>\n                </div>\n                \n            </div>\n        ) : null\n        \n        return (\n            <>\n                {modal}\n            </>\n        )\n    }\n}\n\nclass Person extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortOrder: null,\n            showModal: false,\n            id: null,\n            name: null\n        };\n        this.handleToggleModal = this.handleToggleModal.bind(this);\n    }\n\n    handleToggleModal = (id, name) => {\n        this.setState({\n            showModal: !this.state.showModal,\n            id: id,\n            name: name\n        })\n    }\n\n    render() {\n        const { removePerson, users } = this.props;\n        \n\n        let renderEditButton = (id) => (\n            <Link to={`/update-person/${id}`}>\n                <Button variant=\"warning\">\n                    Edit\n                </Button>\n            </Link>\n        );\n\n        let renderUsers = users.map((user) => {\n            return (\n                <tr key={user.id}>\n                    <td>{user.id}</td>\n                    <td>{user.name}</td>\n                    <td>{user.username}</td>\n                    <td>{user.email}</td>\n                    <td>{user && user.address && user.address.city}</td>\n                    <td>{renderEditButton(user.id)}</td>\n                    <td>\n                        <Button variant=\"danger\" onClick={() => this.handleToggleModal(user.id, user.name)}>Delete</Button>\n                    </td>\n                </tr>\n            );\n        })\n\n        let renderAddPersonButton = (\n            <Link to=\"/add-person\" className=\"table-header-buttonAdd\">\n                <Button variant=\"primary\">\n                    Add User\n                </Button>\n            </Link>\n        );\n\n        return (\n            <>\n                <Modal\n                    removePerson={removePerson}\n                    toggle={this.handleToggleModal}\n                    showModal={this.state.showModal}\n                    id={this.state.id}\n                    name={this.state.name}\n                />\n                <div className=\"table-main-container\">\n                    <h1 className=\"table-main-h1\">Dashboard</h1>\n                    <div className=\"table-header-container\">\n                        <p className=\"table-header-text\">Users List</p>\n                        {renderAddPersonButton}\n                    </div>\n                    <Table responsive=\"lg md sm\" striped bordered hover variant=\"dark\">\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Name</th>\n                                <th className=\"clickable\" onClick={this.changeSortOrder}>\n                                    UserName {this.renderSortOrder(this.state.sortOrder)}\n                                </th>\n                                <th>Email</th>\n                                <th>City</th>\n                                <th>Edit</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {renderUsers}\n                        </tbody>\n                    </Table>\n                </div>\n            </>\n        )\n    }\n\n    renderSortOrder = (sortOrder) => {\n        if (sortOrder === 1) {\n            return 'A-Z'\n        }\n        if (sortOrder === -1) {\n            return 'Z-A'\n        }\n\n        return ''\n    }\n\n    changeSortOrder = () => {\n        const currentSortOrder = this.state.sortOrder;\n        if (currentSortOrder === 1) {\n            this.setState({\n                sortOrder: -1\n            })\n            this.props.changeSortOrder(-1)\n        } else {\n            this.setState({\n                sortOrder: 1\n            })\n            this.props.changeSortOrder(1)\n        }\n    }\n\n}\n\n\n\nexport default Person;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Person from \"../components/Person/Person\";\nimport * as actionTypes from \"../store/actions\";\n\nclass Persons extends Component {\n\n    render() {\n        const { loading, users, error } = this.props;\n        if (loading) return <span>loading...</span>;\n        if (error) return <span>error!</span>;\n        return (\n            <div>\n                <Person\n                    users={users}\n                    removePerson={this.props.onRemovePerson}\n                    changeSortOrder={this.props.onChangeSortOrder}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.data,\n        loading: state.loading,\n        error: state.error,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onRemovePerson: id =>\n            dispatch({ type: actionTypes.REMOVE_PERSON, personId: id }),\n        onChangeSortOrder: (order) =>\n            dispatch({\n                type: actionTypes.CHANGE_SORT_ORDER,\n                order,\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Persons);\n","export const ADD_PERSON = \"ADD_PERSON\";\nexport const UPDATE_PERSON = \"UPDATE_PERSON\";\nexport const REMOVE_PERSON = \"REMOVE_PERSON\";\nexport const LOADING_USERS = \"LOADING_USERS\";\nexport const LOAD_USERS_SUCCESS = \"LOAD_USERS_SUCCESS\";\nexport const LOAD_USERS_ERROR = \"LOAD_USERS_ERROR\";\nexport const CHANGE_SORT_ORDER = \"CHANGE_SORT_ORDER\";\n","import React, { Component } from \"react\";\nimport \"./AddPerson.scss\";\nimport Button from 'react-bootstrap/Button';\nimport { NavLink as Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form'\n\nconst emailValidator = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nclass AddPerson extends Component {\n    constructor() {\n        super();\n        this.state = {\n            name: \"\",\n            emailAddress: \"\",\n            firstNameError: \"\",\n            emailAddressError: \"\",\n            isFormSubmitted: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateFirstName = this.validateFirstName.bind(this);\n        this.validateEmailAddress = this.validateEmailAddress.bind(this);\n        this.validateField = this.validateField.bind(this);\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n        return;\n    }\n\n    handleBlur(event) {\n        const { name } = event.target;\n        this.validateField(name);\n        return;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let formFileds = [\n            \"name\",\n            \"emailAddress\",\n        ];\n        let isValid = true;\n        formFileds.forEach(field => {\n            isValid = this.validateField(field) && isValid;\n        });\n\n        if (isValid) this.setState({ isFormSubmitted: true });\n        else this.setState({ isFormSubmitted: false });\n\n        return this.state.isFormSubmitted;\n    }\n\n    validateField(name) {\n        let isValid = false;\n        if (name === \"name\") isValid = this.validateFirstName();\n        else if (name === \"emailAddress\") isValid = this.validateEmailAddress();\n        return isValid;\n    }\n\n    validateFirstName() {\n        let firstNameError = \"\";\n        const value = this.state.name;\n        if (value.trim() === \"\") firstNameError = \"First Name is required\";\n\n        this.setState({\n            firstNameError\n        });\n        return firstNameError === \"\";\n    }\n\n    validateEmailAddress() {\n        let emailAddressError = \"\";\n        const value = this.state.emailAddress;\n        if (value.trim === \"\") emailAddressError = \"Email Address is required\";\n        else if (!emailValidator.test(value))\n            emailAddressError = \"Email is not valid\";\n\n        this.setState({\n            emailAddressError\n        });\n        return emailAddressError === \"\";\n    }\n\n    render() {\n        let disabled = (this.state.emailAddress && this.state.name) == \"\";\n        return (\n            <>\n            <h1 className=\"userForm-main-h1\">Dashboard</h1>\n            <div className=\"userForm-main-container\">\n                <div className=\"userForm-header-container\">\n                    <h3>Add User</h3>\n                </div>\n                <Form className=\"userForm-form-container\" onSubmit={this.handleSubmit}>\n                    <Form.Group controlId=\"formGroupEmail\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"First Name\"\n                            name=\"name\"\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\" \n                        />\n                    </Form.Group>\n                    {this.state.firstNameError && (\n                        <div className=\"errorMsg\">{this.state.firstNameError}</div>\n                    )}\n                    <Form.Group controlId=\"formGroupPassword\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control \n                            type=\"email\"\n                            placeholder=\"Email Address\"\n                            name=\"emailAddress\"\n                            value={this.state.emailAddress}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    {this.state.emailAddressError && (\n                        <div className=\"errorMsg\">{this.state.emailAddressError}</div>\n                    )}\n                    <div className=\"userForm-add-cancel-buttons\">\n                        <Link className=\"userForm-cancel-button\" to=\"/\">\n                            <Button variant=\"warning\">Cancel</Button>\n                        </Link>\n                        <Link to=\"/\">\n                            <Button\n                                className=\"userForm-addUser-button\"\n                                variant=\"primary\"\n                                disabled={disabled}\n                                onClick={() => this.props.personAdded(this.state.name, this.state.emailAddress)}\n                            >\n                                Add User\n                            </Button>\n                        </Link> \n                    </div>\n                </Form>\n            </div>\n            </>\n        );\n    }\n}\n\nexport default AddPerson;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../store/actions\";\nimport AddPerson from \"../components/AddPerson/AddPerson\";\n\nclass AddPersonContainer extends Component {\n\n    render() {\n        return (\n            <div>\n                <AddPerson personAdded={this.props.onAddedPerson} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddedPerson: (name, email) =>\n            dispatch({\n                type: actionTypes.ADD_PERSON,\n                userData: { name: name, email: email }\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddPersonContainer);\n","import React, { Component } from \"react\";\nimport \"../AddPerson/AddPerson.scss\";\nimport Button from 'react-bootstrap/Button';\nimport { NavLink as Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form'\n\nconst emailValidator = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nclass UpdatePerson extends Component {\n    constructor(props) {\n        super(props);\n        const { person } = props\n        this.state = {\n            id: person.id,\n            name: person.name || '',\n            city: (person.address && person.address.city) || '',\n            username: person.username || '',\n            emailAddress: person.email || '',\n            firstNameError: \"\",\n            emailAddressError: \"\",\n            isFormSubmitted: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.validateFirstName = this.validateFirstName.bind(this);\n        this.validateEmailAddress = this.validateEmailAddress.bind(this);\n        this.validateField = this.validateField.bind(this);\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n        return;\n    }\n\n    handleBlur(event) {\n        const { name } = event.target;\n        this.validateField(name);\n        return;\n    }\n\n    validateField(name) {\n        let isValid = false;\n        if (name === \"name\") isValid = this.validateFirstName();\n        else if (name === \"emailAddress\") isValid = this.validateEmailAddress();\n        return isValid;\n    }\n\n    validateFirstName() {\n        let firstNameError = \"\";\n        const value = this.state.name;\n        if (value.trim() === \"\") firstNameError = \"First Name is required\";\n\n        this.setState({\n            firstNameError\n        });\n        return firstNameError === \"\";\n    }\n\n    validateEmailAddress() {\n        let emailAddressError = \"\";\n        const value = this.state.emailAddress;\n        if (value.trim === \"\") emailAddressError = \"Email Address is required\";\n        else if (!emailValidator.test(value))\n            emailAddressError = \"Email is not valid\";\n\n        this.setState({\n            emailAddressError\n        });\n        return emailAddressError === \"\";\n    }\n\n    render() {\n        let disabled = (this.state.emailAddress && this.state.name) == \"\";\n        return (\n            <div className=\"userForm-main-container\">\n                <div className=\"userForm-header-container\">\n                    <h3>Update User</h3>\n                </div>\n                <Form className=\"userForm-form-container\" onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"First Name\"\n                            name=\"name\"\n                            value={this.state.name}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\" \n                        />\n                    </Form.Group>\n                    {this.state.firstNameError && (\n                        <div className=\"errorMsg\">{this.state.firstNameError}</div>\n                    )}\n                    <Form.Group controlId=\"formGroupEmail\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control \n                            type=\"email\"\n                            placeholder=\"Email Address\"\n                            name=\"emailAddress\"\n                            value={this.state.emailAddress}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    {this.state.emailAddressError && (\n                        <div className=\"errorMsg\">{this.state.emailAddressError}</div>\n                    )}\n                    <Form.Group>\n                        <Form.Label>userName</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"User Name\"\n                            name=\"username\"\n                            value={this.state.username}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>City</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"city\"\n                            name=\"city\"\n                            value={this.state.city}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        /> \n                    </Form.Group>\n                    <div className=\"userForm-add-cancel-buttons\">\n                        <Link to=\"/\" className=\"userForm-cancel-button\">\n                            <Button variant=\"warning\">Cancel</Button>\n                        </Link>\n                        <Link to=\"/\">\n                            <Button\n                                variant=\"primary\"\n                                disabled={disabled}\n                                onClick={() => this.props.onUpdatePerson({\n                                    id: this.props.person.id,\n                                    name: this.state.name,\n                                    username: this.state.username,\n                                    email: this.state.emailAddress,\n                                    address: { city: this.state.city },\n                                })}\n                            >\n                                Update Person\n                            </Button>\n                        </Link>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default UpdatePerson;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../store/actions\";\nimport UpdatePerson from \"../components/UpdatePerson/UpdatePerson\";\n\nclass UpdatePersonContainer extends Component {\n\n    render() {\n        const person = this.props.users.find(user => user.id == this.props.match.params.id);\n        if (!person) {\n            return <div>Loading...</div>\n        }\n        return (\n            <div>\n                <UpdatePerson person={person} onUpdatePerson={this.props.updatePerson} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.data\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updatePerson: (person) =>\n            dispatch({\n                type: actionTypes.UPDATE_PERSON,\n                person,\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UpdatePersonContainer);\n","import React, { Component } from \"react\";\nimport Persons from \"./containers/Persons\";\n//import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport AddPersonContainer from \"./containers/AddPerson\";\nimport UpdatePersonContainer from \"./containers/UpdatePerson\";\nimport * as actionTypes from './store/actions';\nimport { connect } from \"react-redux\";\n\nexport const About = () => (\n    <div>Hello</div>\n)\n\n\nclass App extends Component {\n\n    componentDidMount() {\n        const { fetchUsers } = this.props;\n        fetchUsers();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router basename=\"/ContactList\">\n                    <Route path=\"/ContactList\" exact={true} component={Persons} />\n                    <Route path=\"/ContactList/about\" component={About} />\n                    <Route path=\"/ContactList/add-person\" component={AddPersonContainer} />\n                    <Route path=\"/ContactList/update-person/:id\" component={UpdatePersonContainer} />\n                </Router>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchUsers: () => {\n            dispatch({ type: actionTypes.LOADING_USERS })\n            return fetch(\"https://jsonplaceholder.typicode.com/users\")\n                .then(response => response.json())\n                .then(users => {\n                    dispatch({\n                        type: actionTypes.LOAD_USERS_SUCCESS,\n                        users\n                    });\n                })\n                .catch(error => {\n                    dispatch({\n                        type: actionTypes.LOAD_USERS_ERROR,\n                        error\n                    });\n                });\n        }\n    };\n};\n\nconst mapStateToProps = state => {\n    return {};\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import * as actionTypes from \"./actions\";\n\nconst initialState = {\n    loading: false,\n    data: [],\n    error: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOADING_USERS:\n            return { ...state, loading: true };\n        case actionTypes.LOAD_USERS_SUCCESS:\n            return {\n                ...state,\n                data: action.users,\n                loading: false\n            };\n        case actionTypes.LOAD_USERS_ERROR:\n            return {\n                ...state,\n                error: action.error,\n                loading: false\n            };\n        case actionTypes.ADD_PERSON:\n            const newPerson = {\n                id: generateId(),\n                name: action.userData.name,\n                email: action.userData.email\n            };\n            return {\n                ...state,\n                data: state.data.concat(newPerson)\n            };\n        case actionTypes.UPDATE_PERSON:\n            const changedData = state.data.map(person => {\n                if (person.id === action.person.id) {\n                    return action.person\n                } else {\n                    return person\n                }\n            })\n            return {\n                ...state,\n                data: changedData,\n            };\n        case actionTypes.REMOVE_PERSON:\n            return {\n                ...state,\n                data: state.data.filter(person => person.id !== action.personId)\n            };\n        case actionTypes.CHANGE_SORT_ORDER:\n            const order = action.order\n            const newData = state.data.sort((a, b) => order * a.username.localeCompare(b.username))\n            return {\n                ...state,\n                data: newData,\n            }\n        default:\n            return state;\n    }\n};\n\nfunction generateId() {\n    return Math.floor((Math.random() * 1000)) + 10;\n}\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reducer from \"./store/reducer\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst store = createStore(reducer);\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}