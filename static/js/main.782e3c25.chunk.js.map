{"version":3,"sources":["components/Person/RenderPersons.js","components/Person/Modal.js","components/Person/Person.js","store/actions.js","containers/Persons.js","components/AddPerson/AddPerson.js","containers/AddPerson.js","components/UpdatePerson/UpdatePerson.js","containers/UpdatePerson.js","App.js","store/reducer.js","store/index.js","index.js"],"names":["RenderPersons","_ref","users","renderEditButton","handleToggleModal","map","user","react_default","a","createElement","key","id","name","username","email","address","city","Button","variant","onClick","Modal","removePerson","showModal","toggle","modal","className","concat","Fragment","Person","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setState","state","renderSortOrder","sortOrder","changeSortOrder","bind","assertThisInitialized","_this$props","renderAddPersonButton","react_router_dom","to","Modal_Modal","Table","responsive","striped","bordered","hover","RenderPersons_RenderPersons","React","Component","LOADING_USERS","LOAD_USERS_SUCCESS","LOAD_USERS_ERROR","Persons","loading","error","components_Person_Person","onRemovePerson","onChangeSortOrder","connect","data","dispatch","type","personId","order","emailValidator","AddPerson","emailAddress","firstNameError","emailAddressError","isFormSubmitted","handleChange","handleBlur","handleSubmit","validateFirstName","validateEmailAddress","validateField","event","_event$target","target","value","defineProperty","_this2","preventDefault","isValid","forEach","field","trim","test","_this3","_this$state","disabled","Form","onSubmit","Group","controlId","Label","Control","placeholder","onChange","onBlur","autoComplete","personAdded","AddPersonContainer","components_AddPerson_AddPerson","onAddedPerson","userData","UpdatePerson","person","onUpdatePerson","UpdatePersonContainer","find","match","params","components_UpdatePerson_UpdatePerson","updatePerson","App","fetchUsers","basename","react_router","exact","from","path","component","actionTypes","fetch","then","response","json","catch","initialState","reducer","arguments","length","undefined","action","console","log","objectSpread","newPerson","Math","floor","random","changedData","filter","newData","sort","b","localeCompare","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","rootElement","document","getElementById","ReactDOM","render","react_redux_es","src_App"],"mappings":"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","file":"static/js/main.782e3c25.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport let RenderPersons = ({users, renderEditButton, handleToggleModal}) => \r\nusers.map((user) => {\r\n    return (\r\n        <tr key={user.id}>\r\n            <td>{user.id}</td>\r\n            <td>{user.name}</td>\r\n            <td>{user.username}</td>\r\n            <td>{user.email}</td>\r\n            <td>{user && user.address && user.address.city}</td>\r\n            <td>{renderEditButton(user.id)}</td>\r\n            <td>\r\n                <Button variant=\"danger\" onClick={() => handleToggleModal(user.id, user.name)}>Delete</Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n})","import React from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nexport const Modal = ({removePerson, name, showModal, toggle, id}) => {\r\n    let modal = showModal ? (\r\n        <div className={`${showModal ? \"modal-visible\" : \"modal-non-visible\"}`}>\r\n            <div className=\"modal-header\">\r\n                <p>Remove user</p>\r\n            </div>\r\n            <div className=\"modal-question-container\">\r\n                <p>Are you sure to remove <span className=\"modal-userName\">{name}</span>?</p>\r\n            </div>\r\n            <div className=\"modal-buttons-container\">\r\n                <Button variant=\"danger\" onClick={() => {removePerson(id); toggle();}}>Remove</Button>\r\n                <Button variant=\"warning\" onClick={toggle}>Cancel</Button>\r\n            </div>\r\n        </div>\r\n    ) : null\r\n    \r\n    return (\r\n        <>\r\n            {modal}\r\n        </>\r\n    )\r\n}","import React from \"react\";\nimport \"./Person.scss\";\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button'\nimport { Link } from \"react-router-dom\";\nimport {RenderPersons} from \"./RenderPersons\";\nimport {Modal} from \"./Modal\";\n\n\nclass Person extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortOrder: null,\n            showModal: false,\n            id: null,\n            name: null\n        };\n        this.handleToggleModal = this.handleToggleModal.bind(this);\n    }\n\n    handleToggleModal = (id, name) => {\n        this.setState({\n            showModal: !this.state.showModal,\n            id: id,\n            name: name\n        })\n    }\n\n    render() {\n        const { removePerson, users } = this.props;\n        \n        let renderEditButton = (id) => (\n            <Link to={`/ContactList/update-person/${id}`}>\n                <Button variant=\"warning\">\n                    Edit\n                </Button>\n            </Link>\n        );\n\n        let renderAddPersonButton = (\n            <Link to=\"/ContactList/add-person\" className=\"table-header-buttonAdd\">\n                <Button variant=\"primary\">\n                    Add User\n                </Button>\n            </Link>\n        );\n\n        return (\n            <>\n                <Modal\n                    removePerson={removePerson}\n                    toggle={this.handleToggleModal}\n                    showModal={this.state.showModal}\n                    id={this.state.id}\n                    name={this.state.name}\n                />\n                <div className=\"table-main-container\">\n                    <h1 className=\"table-main-h1\">Dashboard</h1>\n                    <div className=\"table-header-container\">\n                        <p className=\"table-header-text\">Users List</p>\n                        {renderAddPersonButton}\n                    </div>\n                    <Table responsive=\"lg md sm\" striped bordered hover variant=\"dark\">\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Name</th>\n                                <th className=\"clickable\" onClick={this.changeSortOrder}>\n                                    UserName {this.renderSortOrder(this.state.sortOrder)}\n                                </th>\n                                <th>Email</th>\n                                <th>City</th>\n                                <th>Edit</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <RenderPersons \n                                users={users}\n                                handleToggleModal={this.handleToggleModal}\n                                renderEditButton={renderEditButton}\n                            />\n                        </tbody>\n                    </Table>\n                </div>\n            </>\n        )\n    }\n\n    renderSortOrder = (sortOrder) => {\n        if (sortOrder === 1) {\n            return 'A-Z'\n        }\n        if (sortOrder === -1) {\n            return 'Z-A'\n        }\n\n        return ''\n    }\n\n    changeSortOrder = () => {\n        const currentSortOrder = this.state.sortOrder;\n        if (currentSortOrder === 1) {\n            this.setState({\n                sortOrder: -1\n            })\n            this.props.changeSortOrder(-1)\n        } else {\n            this.setState({\n                sortOrder: 1\n            })\n            this.props.changeSortOrder(1)\n        }\n    }\n\n}\n\n\n\nexport default Person;\n","export const ADD_PERSON = \"ADD_PERSON\";\nexport const UPDATE_PERSON = \"UPDATE_PERSON\";\nexport const REMOVE_PERSON = \"REMOVE_PERSON\";\nexport const LOADING_USERS = \"LOADING_USERS\";\nexport const LOAD_USERS_SUCCESS = \"LOAD_USERS_SUCCESS\";\nexport const LOAD_USERS_ERROR = \"LOAD_USERS_ERROR\";\nexport const CHANGE_SORT_ORDER = \"CHANGE_SORT_ORDER\";\n\nexport function fetchDataRequest() {\n    return {\n        type: LOADING_USERS\n    };\n}\n\nexport function fetchDataSuccess(data) {\n    return {\n        type: LOAD_USERS_SUCCESS,\n        data\n    };\n}\n\nexport function fetchDataError(error) {\n    return {\n        type: LOAD_USERS_ERROR,\n        payload: { error }\n    };\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Person from \"../components/Person/Person\";\nimport * as actionTypes from \"../store/actions\";\n\nclass Persons extends Component {\n    render() {\n        const { loading, users, error } = this.props;\n        if (loading) return <span>loading...</span>;\n        if (error) return <span>error!</span>;\n        return (\n            <div>\n                <Person\n                    users={users}\n                    removePerson={this.props.onRemovePerson}\n                    changeSortOrder={this.props.onChangeSortOrder}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.users.data,\n        loading: state.users.loading,\n        error: state.users.error,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onRemovePerson: id =>\n            dispatch({ type: actionTypes.REMOVE_PERSON, personId: id }),\n        onChangeSortOrder: (order) =>\n            dispatch({\n                type: actionTypes.CHANGE_SORT_ORDER,\n                order,\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Persons);\n","import React, { Component } from \"react\";\nimport \"./AddPerson.scss\";\nimport Button from 'react-bootstrap/Button';\nimport { NavLink as Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form'\n\nconst emailValidator = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nclass AddPerson extends Component {\n    constructor() {\n        super();\n        this.state = {\n            name: \"\",\n            emailAddress: \"\",\n            firstNameError: \"\",\n            emailAddressError: \"\",\n            isFormSubmitted: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateFirstName = this.validateFirstName.bind(this);\n        this.validateEmailAddress = this.validateEmailAddress.bind(this);\n        this.validateField = this.validateField.bind(this);\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n        return;\n    }\n\n    handleBlur(event) {\n        const { name } = event.target;\n        this.validateField(name);\n        return;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let formFileds = [\n            \"name\",\n            \"emailAddress\",\n        ];\n        let isValid = true;\n        formFileds.forEach(field => {\n            isValid = this.validateField(field) && isValid;\n        });\n\n        if (isValid) this.setState({ isFormSubmitted: true });\n        else this.setState({ isFormSubmitted: false });\n\n        return this.state.isFormSubmitted;\n    }\n\n    validateField(name) {\n        let isValid = false;\n        if (name === \"name\") isValid = this.validateFirstName();\n        else if (name === \"emailAddress\") isValid = this.validateEmailAddress();\n        return isValid;\n    }\n\n    validateFirstName() {\n        let firstNameError = \"\";\n        const value = this.state.name;\n        if (value.trim() === \"\") firstNameError = \"First Name is required\";\n\n        this.setState({\n            firstNameError\n        });\n        return firstNameError === \"\";\n    }\n\n    validateEmailAddress() {\n        let emailAddressError = \"\";\n        const value = this.state.emailAddress;\n        if (value.trim === \"\") emailAddressError = \"Email Address is required\";\n        else if (!emailValidator.test(value))\n            emailAddressError = \"Email is not valid\";\n\n        this.setState({\n            emailAddressError\n        });\n        return emailAddressError === \"\";\n    }\n\n    render() {\n        const {emailAddressError, firstNameError, name, emailAddress} = this.state;\n        let disabled = (!emailAddressError && !firstNameError && name && emailAddress) === \"\";\n        return (\n            <>\n            <h1 className=\"userForm-main-h1\">Dashboard</h1>\n            <div className=\"userForm-main-container\">\n                <div className=\"userForm-header-container\">\n                    <h3>Add User</h3>\n                </div>\n                <Form className=\"userForm-form-container\" onSubmit={this.handleSubmit}>\n                    <Form.Group controlId=\"formGroupEmail\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"First Name\"\n                            name=\"name\"\n                            value={name}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\" \n                        />\n                    </Form.Group>\n                    {firstNameError && (\n                        <div className=\"errorMsg\">{firstNameError}</div>\n                    )}\n                    <Form.Group controlId=\"formGroupPassword\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control \n                            type=\"email\"\n                            placeholder=\"Email Address\"\n                            name=\"emailAddress\"\n                            value={emailAddress}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    {emailAddressError && (\n                        <div className=\"errorMsg\">{emailAddressError}</div>\n                    )}\n                    <div className=\"userForm-add-cancel-buttons\">\n                        <Link className=\"userForm-cancel-button\" to=\"/ContactList\">\n                            <Button variant=\"warning\">Cancel</Button>\n                        </Link>\n                        <Link to=\"/ContactList\">\n                            <Button\n                                className=\"userForm-addUser-button\"\n                                variant=\"primary\"\n                                disabled={disabled}\n                                onClick={() => this.props.personAdded(name, emailAddress)}\n                            >\n                                Add User\n                            </Button>\n                        </Link> \n                    </div>\n                </Form>\n            </div>\n            </>\n        );\n    }\n}\n\nexport default AddPerson;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../store/actions\";\nimport AddPerson from \"../components/AddPerson/AddPerson\";\n\nclass AddPersonContainer extends Component {\n\n    render() {\n        return (\n            <div>\n                <AddPerson personAdded={this.props.onAddedPerson} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddedPerson: (name, email) =>\n            dispatch({\n                type: actionTypes.ADD_PERSON,\n                userData: { name: name, email: email }\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddPersonContainer);\n","import React, { Component } from \"react\";\nimport \"../AddPerson/AddPerson.scss\";\nimport Button from 'react-bootstrap/Button';\nimport { NavLink as Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form'\n\nconst emailValidator = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nclass UpdatePerson extends Component {\n    constructor(props) {\n        super(props);\n        const { person } = props\n        this.state = {\n            id: person.id,\n            name: person.name || '',\n            city: (person.address && person.address.city) || '',\n            username: person.username || '',\n            emailAddress: person.email || '',\n            firstNameError: \"\",\n            emailAddressError: \"\",\n            isFormSubmitted: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.validateFirstName = this.validateFirstName.bind(this);\n        this.validateEmailAddress = this.validateEmailAddress.bind(this);\n        this.validateField = this.validateField.bind(this);\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n        return;\n    }\n\n    handleBlur(event) {\n        const { name } = event.target;\n        this.validateField(name);\n        return;\n    }\n\n    validateField(name) {\n        let isValid = false;\n        if (name === \"name\") isValid = this.validateFirstName();\n        else if (name === \"emailAddress\") isValid = this.validateEmailAddress();\n        return isValid;\n    }\n\n    validateFirstName() {\n        let firstNameError = \"\";\n        const value = this.state.name;\n        if (value.trim() === \"\") firstNameError = \"First Name is required\";\n\n        this.setState({\n            firstNameError\n        });\n        return firstNameError === \"\";\n    }\n\n    validateEmailAddress() {\n        let emailAddressError = \"\";\n        const value = this.state.emailAddress;\n        if (value.trim === \"\") emailAddressError = \"Email Address is required\";\n        else if (!emailValidator.test(value))\n            emailAddressError = \"Email is not valid\";\n        this.setState({\n            emailAddressError\n        });\n        return emailAddressError === \"\";\n    }\n\n    render() {\n        const {emailAddressError, firstNameError, name, emailAddress, username, city} = this.state;\n        let disabled = (!emailAddressError && !firstNameError) === \"\";\n        return (\n            <div className=\"userForm-main-container\">\n                <div className=\"userForm-header-container\">\n                    <h3>Update User</h3>\n                </div>\n                <Form className=\"userForm-form-container\" onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"First Name\"\n                            name=\"name\"\n                            value={name}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\" \n                        />\n                    </Form.Group>\n                    {firstNameError && (\n                        <div className=\"errorMsg\">{firstNameError}</div>\n                    )}\n                    <Form.Group controlId=\"formGroupEmail\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control \n                            type=\"email\"\n                            placeholder=\"Email Address\"\n                            name=\"emailAddress\"\n                            value={emailAddress}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    {emailAddressError && (\n                        <div className=\"errorMsg\">{emailAddressError}</div>\n                    )}\n                    <Form.Group>\n                        <Form.Label>userName</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"User Name\"\n                            name=\"username\"\n                            value={username}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>City</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"city\"\n                            name=\"city\"\n                            value={city}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        /> \n                    </Form.Group>\n                    <div className=\"userForm-add-cancel-buttons\">\n                        <Link to=\"/ContactList\" className=\"userForm-cancel-button\">\n                            <Button variant=\"warning\">Cancel</Button>\n                        </Link>\n                        <Link to=\"/ContactList\">\n                            <Button\n                                variant=\"primary\"\n                                disabled={disabled}\n                                onClick={() => this.props.onUpdatePerson({\n                                    id: this.props.person.id,\n                                    name: name,\n                                    username: username,\n                                    email: emailAddress,\n                                    address: { city: city },\n                                })}\n                            >\n                                Update Person\n                            </Button>\n                        </Link>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default UpdatePerson;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../store/actions\";\nimport UpdatePerson from \"../components/UpdatePerson/UpdatePerson\";\n\nclass UpdatePersonContainer extends Component {\n\n    render() {\n        const person = this.props.users.find(user => user.id == this.props.match.params.id);\n        return (\n            <div>\n                <UpdatePerson person={person} onUpdatePerson={this.props.updatePerson} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.users.data\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updatePerson: (person) =>\n            dispatch({\n                type: actionTypes.UPDATE_PERSON,\n                person,\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UpdatePersonContainer);\n","import React, { Component } from \"react\";\nimport Persons from \"./containers/Persons\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport AddPersonContainer from \"./containers/AddPerson\";\nimport UpdatePersonContainer from \"./containers/UpdatePerson\";\nimport * as actionTypes from './store/actions';\nimport { connect } from \"react-redux\";\n\n\nclass App extends Component {\n\n    componentDidMount() {\n        const { fetchUsers } = this.props;\n        fetchUsers();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router basename=\"/\">\n                    <Redirect exact from=\"/\" to=\"/ContactList\" />\n                    <Route path=\"/ContactList\" exact={true} component={Persons} />\n                    <Route path=\"/ContactList/add-person\" component={AddPersonContainer} />\n                    <Route path=\"/ContactList/update-person/:id\" component={UpdatePersonContainer} />\n                </Router>\n            </div>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchUsers: () => {\n            dispatch({ type: actionTypes.LOADING_USERS })\n            return fetch(\"https://jsonplaceholder.typicode.com/users\")\n                .then(response => response.json())\n                .then(users => {\n                    dispatch({\n                        type: actionTypes.LOAD_USERS_SUCCESS,\n                        users\n                    });\n                })\n                .catch(error => {\n                    dispatch({\n                        type: actionTypes.LOAD_USERS_ERROR,\n                        error\n                    });\n                });\n        }\n    };\n};\n\n\nexport default connect(\n    null,\n    mapDispatchToProps\n)(App);\n","import * as actionTypes from \"./actions\";\n\nconst initialState = {\n    loading: false,\n    data: [],\n    error: null\n};\n\nconst reducer = (state = initialState, action) => {\n    console.log(state);\n    switch (action.type) {\n        case actionTypes.LOADING_USERS:\n            return { ...state, loading: true, };\n        case actionTypes.LOAD_USERS_SUCCESS:\n            return {\n                ...state,\n                data: action.users,\n                loading: false\n            };\n        case actionTypes.LOAD_USERS_ERROR:\n            return {\n                ...state,\n                error: action.error,\n                loading: false\n            };\n        case actionTypes.ADD_PERSON:\n            const newPerson = {\n                id: generateId(),\n                name: action.userData.name,\n                email: action.userData.email\n            };\n            return {\n                ...state,\n                data: state.data.concat(newPerson)\n            };\n        case actionTypes.UPDATE_PERSON:\n            const changedData = state.data.map(person => {\n                if (person.id === action.person.id) {\n                    return action.person\n                } else {\n                    return person\n                }\n            })\n            return {\n                ...state,\n                data: changedData,\n            };\n        case actionTypes.REMOVE_PERSON:\n            return {\n                ...state,\n                data: state.data.filter(person => person.id !== action.personId)\n            };\n        case actionTypes.CHANGE_SORT_ORDER:\n            const order = action.order\n            const newData = state.data.sort((a, b) => order * a.username.localeCompare(b.username))\n            return {\n                ...state,\n                data: newData,\n            }\n        default:\n            return state;\n    }\n};\n\nfunction generateId() {\n    return Math.floor((Math.random() * 1000)) + 10;\n}\n\nexport default reducer;\n","import {combineReducers} from \"redux\";\r\nimport users from \"./reducer\";\r\n\r\nexport default combineReducers({\r\n    users\r\n})","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport rootReducer from \"./store/index\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}