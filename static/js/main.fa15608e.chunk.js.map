{"version":3,"sources":["components/Person/RenderPersons.js","components/Person/Modal.js","components/Person/Person.js","containers/Persons.js","store/actions.js","components/AddPerson/AddPerson.js","containers/AddPerson.js","components/UpdatePerson/UpdatePerson.js","containers/UpdatePerson.js","App.js","store/reducer.js","index.js"],"names":["RenderPersons","_ref","users","renderEditButton","handleToggleModal","map","user","react_default","a","createElement","key","id","name","username","email","address","city","Button","variant","onClick","Modal","removePerson","showModal","toggle","modal","className","concat","Fragment","Person","props","_this","Object","classCallCheck","this","_super","call","setState","state","renderSortOrder","sortOrder","changeSortOrder","bind","assertThisInitialized","_this$props","renderAddPersonButton","react_router_dom","to","Modal_Modal","Table","responsive","striped","bordered","hover","RenderPersons_RenderPersons","React","Component","Persons","loading","error","components_Person_Person","onRemovePerson","onChangeSortOrder","connect","data","dispatch","type","personId","order","emailValidator","AddPerson","emailAddress","firstNameError","emailAddressError","isFormSubmitted","handleChange","handleBlur","handleSubmit","validateFirstName","validateEmailAddress","validateField","event","_event$target","target","value","defineProperty","_this2","preventDefault","isValid","forEach","field","trim","test","_this3","_this$state","disabled","Form","onSubmit","Group","controlId","Label","Control","placeholder","onChange","onBlur","autoComplete","personAdded","AddPersonContainer","components_AddPerson_AddPerson","onAddedPerson","userData","UpdatePerson","person","onUpdatePerson","UpdatePersonContainer","find","match","params","components_UpdatePerson_UpdatePerson","updatePerson","App","fetchUsers","basename","react_router","exact","from","path","component","fetch","then","response","json","catch","initialState","reducer","arguments","length","undefined","action","objectSpread","newPerson","Math","floor","random","changedData","filter","newData","sort","b","localeCompare","store","createStore","rootElement","document","getElementById","ReactDOM","render","es","src_App"],"mappings":"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","file":"static/js/main.fa15608e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nexport let RenderPersons = ({users, renderEditButton, handleToggleModal}) =>\r\nusers.map((user) => {\r\n    return (\r\n        <tr key={user.id}>\r\n            <td>{user.id}</td>\r\n            <td>{user.name}</td>\r\n            <td>{user.username}</td>\r\n            <td>{user.email}</td>\r\n            <td>{user && user.address && user.address.city}</td>\r\n            <td>{renderEditButton(user.id)}</td>\r\n            <td>\r\n                <Button variant=\"danger\" onClick={() => handleToggleModal(user.id, user.name)}>Delete</Button>\r\n            </td>\r\n        </tr>\r\n    );\r\n})","import React from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nexport const Modal = ({removePerson, name, showModal, toggle, id}) => {\r\n    let modal = showModal ? (\r\n        <div className={`${showModal ? \"modal-visible\" : \"modal-non-visible\"}`}>\r\n            <div className=\"modal-header\">\r\n                <p>Remove user</p>\r\n            </div>\r\n            <div className=\"modal-question-container\">\r\n                <p>Are you sure to remove <span className=\"modal-userName\">{name}</span>?</p>\r\n            </div>\r\n            <div className=\"modal-buttons-container\">\r\n                <Button variant=\"danger\" onClick={() => {removePerson(id); toggle();}}>Remove</Button>\r\n                <Button variant=\"warning\" onClick={toggle}>Cancel</Button>\r\n            </div>\r\n        </div>\r\n    ) : null\r\n    \r\n    return (\r\n        <>\r\n            {modal}\r\n        </>\r\n    )\r\n}","import React from \"react\";\nimport \"./Person.scss\";\nimport Table from 'react-bootstrap/Table';\nimport Button from 'react-bootstrap/Button'\nimport { Link } from \"react-router-dom\";\nimport {RenderPersons} from \"./RenderPersons\";\nimport {Modal} from \"./Modal\";\n\n\nclass Person extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sortOrder: null,\n            showModal: false,\n            id: null,\n            name: null\n        };\n        this.handleToggleModal = this.handleToggleModal.bind(this);\n    }\n\n    handleToggleModal = (id, name) => {\n        this.setState({\n            showModal: !this.state.showModal,\n            id: id,\n            name: name\n        })\n    }\n\n    render() {\n        const { removePerson, users } = this.props;\n        \n        let renderEditButton = (id) => (\n            <Link to={`/ContactList/update-person/${id}`}>\n                <Button variant=\"warning\">\n                    Edit\n                </Button>\n            </Link>\n        );\n\n        let renderAddPersonButton = (\n            <Link to=\"/ContactList/add-person\" className=\"table-header-buttonAdd\">\n                <Button variant=\"primary\">\n                    Add User\n                </Button>\n            </Link>\n        );\n\n        return (\n            <>\n                <Modal\n                    removePerson={removePerson}\n                    toggle={this.handleToggleModal}\n                    showModal={this.state.showModal}\n                    id={this.state.id}\n                    name={this.state.name}\n                />\n                <div className=\"table-main-container\">\n                    <h1 className=\"table-main-h1\">Dashboard</h1>\n                    <div className=\"table-header-container\">\n                        <p className=\"table-header-text\">Users List</p>\n                        {renderAddPersonButton}\n                    </div>\n                    <Table responsive=\"lg md sm\" striped bordered hover variant=\"dark\">\n                        <thead>\n                            <tr>\n                                <th>Id</th>\n                                <th>Name</th>\n                                <th className=\"clickable\" onClick={this.changeSortOrder}>\n                                    UserName {this.renderSortOrder(this.state.sortOrder)}\n                                </th>\n                                <th>Email</th>\n                                <th>City</th>\n                                <th>Edit</th>\n                                <th>Delete</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <RenderPersons \n                                users={users}\n                                handleToggleModal={this.handleToggleModal}\n                                renderEditButton={renderEditButton}\n                            />\n                        </tbody>\n                    </Table>\n                </div>\n            </>\n        )\n    }\n\n    renderSortOrder = (sortOrder) => {\n        if (sortOrder === 1) {\n            return 'A-Z'\n        }\n        if (sortOrder === -1) {\n            return 'Z-A'\n        }\n\n        return ''\n    }\n\n    changeSortOrder = () => {\n        const currentSortOrder = this.state.sortOrder;\n        if (currentSortOrder === 1) {\n            this.setState({\n                sortOrder: -1\n            })\n            this.props.changeSortOrder(-1)\n        } else {\n            this.setState({\n                sortOrder: 1\n            })\n            this.props.changeSortOrder(1)\n        }\n    }\n\n}\n\n\n\nexport default Person;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Person from \"../components/Person/Person\";\nimport * as actionTypes from \"../store/actions\";\n\nclass Persons extends Component {\n\n    render() {\n        const { loading, users, error } = this.props;\n        if (loading) return <span>loading...</span>;\n        if (error) return <span>error!</span>;\n        return (\n            <div>\n                <Person\n                    users={users}\n                    removePerson={this.props.onRemovePerson}\n                    changeSortOrder={this.props.onChangeSortOrder}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.data,\n        loading: state.loading,\n        error: state.error,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onRemovePerson: id =>\n            dispatch({ type: actionTypes.REMOVE_PERSON, personId: id }),\n        onChangeSortOrder: (order) =>\n            dispatch({\n                type: actionTypes.CHANGE_SORT_ORDER,\n                order,\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Persons);\n","export const ADD_PERSON = \"ADD_PERSON\";\nexport const UPDATE_PERSON = \"UPDATE_PERSON\";\nexport const REMOVE_PERSON = \"REMOVE_PERSON\";\nexport const LOADING_USERS = \"LOADING_USERS\";\nexport const LOAD_USERS_SUCCESS = \"LOAD_USERS_SUCCESS\";\nexport const LOAD_USERS_ERROR = \"LOAD_USERS_ERROR\";\nexport const CHANGE_SORT_ORDER = \"CHANGE_SORT_ORDER\";\n","import React, { Component } from \"react\";\nimport \"./AddPerson.scss\";\nimport Button from 'react-bootstrap/Button';\nimport { NavLink as Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form'\n\nconst emailValidator = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nclass AddPerson extends Component {\n    constructor() {\n        super();\n        this.state = {\n            name: \"\",\n            emailAddress: \"\",\n            firstNameError: \"\",\n            emailAddressError: \"\",\n            isFormSubmitted: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.validateFirstName = this.validateFirstName.bind(this);\n        this.validateEmailAddress = this.validateEmailAddress.bind(this);\n        this.validateField = this.validateField.bind(this);\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n        return;\n    }\n\n    handleBlur(event) {\n        const { name } = event.target;\n        this.validateField(name);\n        return;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        let formFileds = [\n            \"name\",\n            \"emailAddress\",\n        ];\n        let isValid = true;\n        formFileds.forEach(field => {\n            isValid = this.validateField(field) && isValid;\n        });\n\n        if (isValid) this.setState({ isFormSubmitted: true });\n        else this.setState({ isFormSubmitted: false });\n\n        return this.state.isFormSubmitted;\n    }\n\n    validateField(name) {\n        let isValid = false;\n        if (name === \"name\") isValid = this.validateFirstName();\n        else if (name === \"emailAddress\") isValid = this.validateEmailAddress();\n        return isValid;\n    }\n\n    validateFirstName() {\n        let firstNameError = \"\";\n        const value = this.state.name;\n        if (value.trim() === \"\") firstNameError = \"First Name is required\";\n\n        this.setState({\n            firstNameError\n        });\n        return firstNameError === \"\";\n    }\n\n    validateEmailAddress() {\n        let emailAddressError = \"\";\n        const value = this.state.emailAddress;\n        if (value.trim === \"\") emailAddressError = \"Email Address is required\";\n        else if (!emailValidator.test(value))\n            emailAddressError = \"Email is not valid\";\n\n        this.setState({\n            emailAddressError\n        });\n        return emailAddressError === \"\";\n    }\n\n    render() {\n        const {emailAddressError, firstNameError, name, emailAddress} = this.state;\n        let disabled = (!emailAddressError && !firstNameError && name && emailAddress) === \"\";\n        return (\n            <>\n            <h1 className=\"userForm-main-h1\">Dashboard</h1>\n            <div className=\"userForm-main-container\">\n                <div className=\"userForm-header-container\">\n                    <h3>Add User</h3>\n                </div>\n                <Form className=\"userForm-form-container\" onSubmit={this.handleSubmit}>\n                    <Form.Group controlId=\"formGroupEmail\">\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"First Name\"\n                            name=\"name\"\n                            value={name}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\" \n                        />\n                    </Form.Group>\n                    {firstNameError && (\n                        <div className=\"errorMsg\">{firstNameError}</div>\n                    )}\n                    <Form.Group controlId=\"formGroupPassword\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control \n                            type=\"email\"\n                            placeholder=\"Email Address\"\n                            name=\"emailAddress\"\n                            value={emailAddress}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    {emailAddressError && (\n                        <div className=\"errorMsg\">{emailAddressError}</div>\n                    )}\n                    <div className=\"userForm-add-cancel-buttons\">\n                        <Link className=\"userForm-cancel-button\" to=\"/ContactList\">\n                            <Button variant=\"warning\">Cancel</Button>\n                        </Link>\n                        <Link to=\"/ContactList\">\n                            <Button\n                                className=\"userForm-addUser-button\"\n                                variant=\"primary\"\n                                disabled={disabled}\n                                onClick={() => this.props.personAdded(name, emailAddress)}\n                            >\n                                Add User\n                            </Button>\n                        </Link> \n                    </div>\n                </Form>\n            </div>\n            </>\n        );\n    }\n}\n\nexport default AddPerson;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../store/actions\";\nimport AddPerson from \"../components/AddPerson/AddPerson\";\n\nclass AddPersonContainer extends Component {\n\n    render() {\n        return (\n            <div>\n                <AddPerson personAdded={this.props.onAddedPerson} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAddedPerson: (name, email) =>\n            dispatch({\n                type: actionTypes.ADD_PERSON,\n                userData: { name: name, email: email }\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AddPersonContainer);\n","import React, { Component } from \"react\";\nimport \"../AddPerson/AddPerson.scss\";\nimport Button from 'react-bootstrap/Button';\nimport { NavLink as Link } from 'react-router-dom';\nimport Form from 'react-bootstrap/Form'\n\nconst emailValidator = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nclass UpdatePerson extends Component {\n    constructor(props) {\n        super(props);\n        const { person } = props\n        this.state = {\n            id: person.id,\n            name: person.name || '',\n            city: (person.address && person.address.city) || '',\n            username: person.username || '',\n            emailAddress: person.email || '',\n            firstNameError: \"\",\n            emailAddressError: \"\",\n            isFormSubmitted: false\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.validateFirstName = this.validateFirstName.bind(this);\n        this.validateEmailAddress = this.validateEmailAddress.bind(this);\n        this.validateField = this.validateField.bind(this);\n    }\n\n    handleChange(event) {\n        const { name, value } = event.target;\n        this.setState({\n            [name]: value\n        });\n        return;\n    }\n\n    handleBlur(event) {\n        const { name } = event.target;\n        this.validateField(name);\n        return;\n    }\n\n    validateField(name) {\n        let isValid = false;\n        if (name === \"name\") isValid = this.validateFirstName();\n        else if (name === \"emailAddress\") isValid = this.validateEmailAddress();\n        return isValid;\n    }\n\n    validateFirstName() {\n        let firstNameError = \"\";\n        const value = this.state.name;\n        if (value.trim() === \"\") firstNameError = \"First Name is required\";\n\n        this.setState({\n            firstNameError\n        });\n        return firstNameError === \"\";\n    }\n\n    validateEmailAddress() {\n        let emailAddressError = \"\";\n        const value = this.state.emailAddress;\n        if (value.trim === \"\") emailAddressError = \"Email Address is required\";\n        else if (!emailValidator.test(value))\n            emailAddressError = \"Email is not valid\";\n        this.setState({\n            emailAddressError\n        });\n        return emailAddressError === \"\";\n    }\n\n    render() {\n        const {emailAddressError, firstNameError, name, emailAddress, username, city} = this.state;\n        let disabled = (!emailAddressError && !firstNameError) === \"\";\n        return (\n            <div className=\"userForm-main-container\">\n                <div className=\"userForm-header-container\">\n                    <h3>Update User</h3>\n                </div>\n                <Form className=\"userForm-form-container\" onSubmit={this.handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Name</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"First Name\"\n                            name=\"name\"\n                            value={name}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\" \n                        />\n                    </Form.Group>\n                    {firstNameError && (\n                        <div className=\"errorMsg\">{firstNameError}</div>\n                    )}\n                    <Form.Group controlId=\"formGroupEmail\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control \n                            type=\"email\"\n                            placeholder=\"Email Address\"\n                            name=\"emailAddress\"\n                            value={emailAddress}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    {emailAddressError && (\n                        <div className=\"errorMsg\">{emailAddressError}</div>\n                    )}\n                    <Form.Group>\n                        <Form.Label>userName</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"User Name\"\n                            name=\"username\"\n                            value={username}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        />\n                        \n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>City</Form.Label>\n                        <Form.Control \n                            type=\"text\"\n                            placeholder=\"city\"\n                            name=\"city\"\n                            value={city}\n                            onChange={this.handleChange}\n                            onBlur={this.handleBlur}\n                            autoComplete=\"off\"\n                        /> \n                    </Form.Group>\n                    <div className=\"userForm-add-cancel-buttons\">\n                        <Link to=\"/ContactList\" className=\"userForm-cancel-button\">\n                            <Button variant=\"warning\">Cancel</Button>\n                        </Link>\n                        <Link to=\"/ContactList\">\n                            <Button\n                                variant=\"primary\"\n                                disabled={disabled}\n                                onClick={() => this.props.onUpdatePerson({\n                                    id: this.props.person.id,\n                                    name: name,\n                                    username: username,\n                                    email: emailAddress,\n                                    address: { city: city },\n                                })}\n                            >\n                                Update Person\n                            </Button>\n                        </Link>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default UpdatePerson;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actionTypes from \"../store/actions\";\nimport UpdatePerson from \"../components/UpdatePerson/UpdatePerson\";\n\nclass UpdatePersonContainer extends Component {\n\n    render() {\n        const person = this.props.users.find(user => user.id == this.props.match.params.id);\n        return (\n            <div>\n                <UpdatePerson person={person} onUpdatePerson={this.props.updatePerson} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.data\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updatePerson: (person) =>\n            dispatch({\n                type: actionTypes.UPDATE_PERSON,\n                person,\n            }),\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(UpdatePersonContainer);\n","import React, { Component } from \"react\";\nimport Persons from \"./containers/Persons\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport AddPersonContainer from \"./containers/AddPerson\";\nimport UpdatePersonContainer from \"./containers/UpdatePerson\";\nimport * as actionTypes from './store/actions';\nimport { connect } from \"react-redux\";\n\n\nclass App extends Component {\n\n    componentDidMount() {\n        const { fetchUsers } = this.props;\n        fetchUsers();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router basename=\"/\">\n                    <Redirect exact from=\"/\" to=\"/ContactList\"/>\n                    <Route path=\"/ContactList\" exact={true} component={Persons} />\n                    <Route path=\"/ContactList/add-person\" component={AddPersonContainer} />\n                    <Route path=\"/ContactList/update-person/:id\" component={UpdatePersonContainer} />\n                </Router>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchUsers: () => {\n            dispatch({ type: actionTypes.LOADING_USERS })\n            return fetch(\"https://jsonplaceholder.typicode.com/users\")\n                .then(response => response.json())\n                .then(users => {\n                    dispatch({\n                        type: actionTypes.LOAD_USERS_SUCCESS,\n                        users\n                    });\n                })\n                .catch(error => {\n                    dispatch({\n                        type: actionTypes.LOAD_USERS_ERROR,\n                        error\n                    });\n                });\n        }\n    };\n};\n\nconst mapStateToProps = state => {\n    return {};\n};\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import * as actionTypes from \"./actions\";\n\nconst initialState = {\n    loading: false,\n    data: [],\n    error: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOADING_USERS:\n            return { ...state, loading: true };\n        case actionTypes.LOAD_USERS_SUCCESS:\n            return {\n                ...state,\n                data: action.users,\n                loading: false\n            };\n        case actionTypes.LOAD_USERS_ERROR:\n            return {\n                ...state,\n                error: action.error,\n                loading: false\n            };\n        case actionTypes.ADD_PERSON:\n            const newPerson = {\n                id: generateId(),\n                name: action.userData.name,\n                email: action.userData.email\n            };\n            return {\n                ...state,\n                data: state.data.concat(newPerson)\n            };\n        case actionTypes.UPDATE_PERSON:\n            const changedData = state.data.map(person => {\n                if (person.id === action.person.id) {\n                    return action.person\n                } else {\n                    return person\n                }\n            })\n            return {\n                ...state,\n                data: changedData,\n            };\n        case actionTypes.REMOVE_PERSON:\n            return {\n                ...state,\n                data: state.data.filter(person => person.id !== action.personId)\n            };\n        case actionTypes.CHANGE_SORT_ORDER:\n            const order = action.order\n            const newData = state.data.sort((a, b) => order * a.username.localeCompare(b.username))\n            return {\n                ...state,\n                data: newData,\n            }\n        default:\n            return state;\n    }\n};\n\nfunction generateId() {\n    return Math.floor((Math.random() * 1000)) + 10;\n}\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reducer from \"./store/reducer\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst store = createStore(reducer);\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n"],"sourceRoot":""}